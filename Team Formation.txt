function Team(startNode) {
  this.max = startNode;
  // this.nodes = {};
  // this.nodes[startNode] = null;
  this.len = 1;
}

Team.prototype.addNode = function(node) {
  // this.nodes[node] = null;
  this.len++;
  if (node > this.max) {
    this.max = node;
  }
}

function sortNumber(a, b) {

  return a-b;
}

function formTeams(students) {

  if (students.length <= 1) {
    return students.length;
  }

  var teams = [];

  function addTeam(student) {
    var team = new Team(student)
    teams.push(team);
  }

  for (var i = 0; i < students.length; i++) {
    var student = students[i];

    if (teams.length == 0 || 
        teams[teams.length - 1].max <= student - 2) {
      addTeam(student);
      continue;
    }

    // Instead we will binary search for the max
    var lo = 0;
    var hi = teams.length - 1;
    var searchElem = student - 1;
    while (lo < hi) {
      var mid = lo + parseInt((hi - lo) / 2);
      if (teams[mid].max == searchElem) {
        // Found it, get out of the loop
        lo = mid;
        hi = lo-1;
      } else if (searchElem > teams[mid].max) {
        lo = mid + 1;
      } else {
        hi = mid - 1;
      }
    }

    var searchIndex = lo;
    var minMaxLen = 1000000;
    var minMaxIndex = lo;
    if (teams[searchIndex].max == searchElem) {
      while (searchIndex >= 0 && teams[searchIndex].max == searchElem) {
        if (teams[searchIndex].len < minMaxLen) {
          minMaxLen = teams[searchIndex].len;
          minMaxIndex = searchIndex;
        }
        searchIndex--;
      }
      searchIndex = lo + 1;
      while (searchIndex < teams.length && teams[searchIndex].max == searchElem) {
        if (teams[searchIndex].len <= minMaxLen) {
          minMaxLen = teams[searchIndex].len;
          minMaxIndex = searchIndex;
        }
        searchIndex++;
      }
      teams[minMaxIndex].addNode(student);
      continue;
    } else {
      addTeam(student);
      continue;
    }

    /*for (var j = 0; j < teams.length; j++) {
      var team = teams[j];
      if (team.max == student - 1) {
        if (teams[j + 1] !== undefined && teams[j + 1].max == student - 1) {
          continue;
        }
        team.addNode(student);
        break;
      }
      if (j == teams.length - 1) {
        addTeam(student);
        break;
      }
    }*/
  }

  var min = 100000;
  for (var i = 0; i < teams.length; i++) {
    var team = teams[i];
    if (team.len < min) {
      min = team.len;
    }
  }

  return min;
}

function processData(input) {
  var lines = input.split("\n");
  for (var i = 1; i < lines.length; i++) {
    var students = lines[i].split(" ").slice(1, lines[i].length).map(parseFloat).sort(sortNumber);
    console.log(formTeams(students));
  }
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});