//var qt = [];
//qt[0] = 0;
//var qtmax = [];
//qtmax[0] = 0;

function processData(input) {
    var lines = input.split("\n");
    var line = lines[0].split(" ");
    var n = parseInt(line[0]);
    var m = parseInt(line[1]);
    var q = parseInt(line[2]);

    var DAG = new Graph();
    var qtype, qt1, qt2, max, qi;
    max = 0;
    qi = 0;
    
    for(var k = 0; k <= n; k++) {
        DAG.setWeight(k, 0); 
    }
    
    for(k = 1; k <= m; k++) {
        line = lines[k].split(" ");
        DAG.addEdge(parseInt(line[0]), parseInt(line[1]));   
    }
    
    for(k = m+1; k <= m + q; k++) {
        //console.error(qt);
        //console.error(qtmax);
        
        line = lines[k].split(" ");
        qtype = parseInt(line[0]);
        switch(qtype) {
            case 1:
                qi++;
                qt1 = parseInt(line[1]);
                qt2 = parseInt(line[2]);
                max = Math.max(max, qt2);
                //qt[qi] = qt2;
                //qtmax[qi] = qt2;
                //for (var i = 0; i < qi; i++) qtmax[i] = Math.max(qtmax[i], qt2);
                
                DAG = op1(DAG, qt1, qt2, qi);
                break;
                
            case 2:
                qt1 = parseInt(line[1]);
                qt2 = parseInt(line[2]);
               
                if (qt2 < max) {  
                    qi++;
                    //qt[qi] = qt2;
                    //qtmax[qi] = qt2;
                    //for (var i = 0; i < qi; i++) qtmax[i] = Math.max(qtmax[i], qt2);
                    DAG = op2(DAG, qt1, qt2, qi);
                } 
                break;
                
            case 3:
                console.log(DAG.weight[parseInt(line[1])]);
                break;
            default:
                console.error("qtype error: " + qtype + " at line k= " + k);
        }

    }    
}
    
function op1(DAG, u, x, qi) {
    if (x == DAG.weight[u]) return DAG;

    DAG.setWeight(u, x);
    DAG.lastq[u] = qi;
    
    if (DAG.neighbors[u] === undefined) return DAG;
    for (var k = 0; k < DAG.neighbors[u].length; k++) {
        if (DAG.lastq[DAG.neighbors[u][k]] != qi) DAG = op1(DAG, DAG.neighbors[u][k], x, qi);
    } 
    return DAG;
}
    
function op2(DAG, u, x, qi) {
    //if (x >= qtmax[DAG.lastq[u]]) return DAG;
    //if (DAG.lastq[u] == qi - 1 && DAG.weight[u] <= x) return DAG;    
    if (DAG.weight[u] > x) DAG.setWeight(u, x);

    
    
    DAG.lastq[u] = qi;
    
    if (DAG.neighbors[u] === undefined ) return DAG;
    for (var k = 0; k < DAG.neighbors[u].length; k++) {
        if (DAG.lastq[DAG.neighbors[u][k]] != qi) DAG = op2(DAG, DAG.neighbors[u][k], x, qi);
    } 
    return DAG;
}
    
    
function Graph() {
  var neighbors = this.neighbors = {}; // Key = vertex, value = array of neighbors.
  var weight = this.weight = {};
  var lastq = this.lastq = {};
    
  this.addEdge = function (u, v) {
    if (neighbors[u] === undefined) {  // Add the edge u -> v.
      neighbors[u] = [];
    }
    neighbors[u].push(v);
  };
    
  this.setWeight = function (node, w) {
    weight[node] = w;
  };

  return this;
}
    
    
process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});