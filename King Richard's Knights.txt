'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(str => str.trim());

    main();
});

function readLine() {
    return inputString[currentLine++];
}

class Command{
    constructor(original,newCoord,dimension,iters){
        this.original = original;
        this.newCoord = newCoord;
        this.dimension = dimension;
        this.iters = iters;
    }
    get(x,y){
        x -= this.newCoord[0];
        y -= this.newCoord[1];
        let rotations = this.iters % 4;
        [x,y] = [y,x];
        while(rotations != 0){
            let temp = x;
            x = y;
            y = this.dimension - temp;
            rotations--;
        }
        [x,y] = [y,x];
        return [this.original[0]+x,this.original[1]+y];
    }
    has(x,y){
        return (x >= this.original[0] && y>= this.original[1] && x <= this.original[0]+this.dimension && y<= this.original[1]+this.dimension);
    }
    check(x,y){
        [this.original,this.newCoord] = [this.newCoord,this.original];
        this.iters = 4 - (this.iters%4);
        let result = this.get(x,y);
        this.iters = 4 - (this.iters%4);
        [this.original,this.newCoord] = [this.newCoord,this.original];
        return result;
    }

}
function kingRichardKnights(n,s,commands,knights){
    var commandData = [];
    commandData.push(new Command([1,1],[1,1],(n-1),0));
    for(let i = 0;i < s;i++){
        let a = commands[i][0];
        let b = commands[i][1];
        let d = commands[i][2]
        let startCoord = commandData[commandData.length - 1].get(a,b);
        let endCoord = commandData[commandData.length - 1].get(a+d,b+d);
        let original = [];
        original[0] = Math.min(startCoord[0],endCoord[0]);
        original[1] = Math.min(startCoord[1],endCoord[1]);
        commandData.push(new Command(original,[a,b],d,i+1));
    }
    var points = [];
    for(let j = 0;j<knights.length;j++){
        let x = Math.floor(knights[j]/n)+1;
        let y = knights[j]%n+1;
        let lowerBound = 0;
        let upperBound = s;
        while(lowerBound<upperBound){
            let mid = Math.floor((lowerBound+upperBound+1)/2);
            if(commandData[mid].has(x,y)){
                lowerBound = mid;
            } else {
                upperBound = mid - 1;
            }
        }
        let requiredPoint = commandData[lowerBound].check(x,y);
        points.push(requiredPoint);
    }
    return points;
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const n = parseInt(readLine(), 10);

    const s = parseInt(readLine(), 10);

    let commands = Array(s);

    for (let commandsRowItr = 0; commandsRowItr < s; commandsRowItr++) {
        commands[commandsRowItr] = readLine().split(' ').map(commandsTemp => parseInt(commandsTemp, 10));
    }
    
    const noOfKnights = parseInt(readLine(),10);
    
    let knights = Array(noOfKnights);
    
    for(let i = 0;i < noOfKnights;i++){
        knights[i] = parseInt(readLine(), 10);;
    }
    
    let result = kingRichardKnights(n, s, commands,knights);

    ws.write(result.map(x => x.join(' ')).join("\n") + "\n");

    ws.end();
}