//bought 12

function processData(input) {
    input = input.split("\n");
    var f1 = input[0].split(" ").map(Number);
    var N = f1[0];//height
    var M = f1[1];//width
    var K = f1[2];//cheat-cost
    var Q = f1[3];//queries
    input.splice(0,1);
    var b = input.slice(0,N);
    b = b.map(function(l){return l.split(" ").map(function(f){
        if (f==0) return "#"; //immovable
        return "+"; //movable
    });});
    input.splice(0,N);
    for (var q=0;q<Q;q++) {
        var query = input[q].split(" ").map(Number);
        var board = b.slice().map(function(l){return l.slice();});
        var empty = [query[1]-1,query[0]-1];
        var cao = [query[3]-1,query[2]-1];
        var exit = [query[5]-1,query[4]-1];
        board[empty[1]][empty[0]] = " "; // empty      
        board[cao[1]][cao[0]] = "C"; //Cao Cao
        board[exit[1]][exit[0]] = "X"; //exit
        var moves = 0;
        //try and find path from cao to exit
        var caoToExit = findPath(board,cao,exit,N*M/2," +CX",[]);
        //console.log(board);
        //console.log(caoToExit);
        if (caoToExit=="X") { //no path from cao to exit, can't be done!
            console.log("-1");
            continue;
        }
        var step = 0;
        while (!(cao[0]==exit[0]&&cao[1]==exit[1])) {
            //try and move the empty field 1 step ahead in the cao path
            var cao1 = caoToExit.charAt(step);
            //console.log("moving "+cao1);
            if (cao1=="L") {
                cao1 = [cao[0]-1,cao[1]];
            } else if (cao1=="R") {
                cao1 = [cao[0]+1,cao[1]];
            } else if (cao1=="U") {
                cao1 = [cao[0],cao[1]-1];
            } else if (cao1=="D") {
                cao1 = [cao[0],cao[1]+1];
            }
            //console.log("moving to "+cao1);
            var emptyToCao1 = findPath(board,empty,cao1,K," +X",[]);
            if (emptyToCao1 == "X") { //cheaper/necessary to cheat: cheat, move cao
                moves += K+1;
                board[empty[1]][empty[0]] = "+";
                board[cao[1]][cao[0]] = " ";
                board[cao1[1]][cao1[0]] = "C";
                empty = cao.slice();
                cao = cao1.slice();
            } else { //move cao 1 step closer along the path
                moves += emptyToCao1.length+1;
                board[empty[1]][empty[0]] = "+";
                board[cao[1]][cao[0]] = " ";
                board[cao1[1]][cao1[0]] = "C";
                empty = cao.slice();
                cao = cao1.slice();
            }
            step++;
        }
        console.log(moves);
    }
} 

//if result is X, there is no path of length steps
function findPath(board,from,to,steps,allowed,visited) {
    function getIndex(pos){
        return pos[0]+pos[1]*board[0].length;
    }
    var index = getIndex(from);
    if (visited.indexOf(index)!=-1) {
        return "X";
    }
    if (visited.length!=0) {
        visited = [visited[visited.length-1],index];
    } else {
        visited = [index];
    }
    if (from[0]==to[0] && from[1]==to[1]) return "";//found a way!
    if (steps<=0 || allowed.indexOf(board[from[1]][from[0]])==-1) return "X";
    var best = "X";
    var min = Math.abs(from[0]-to[0])+Math.abs(from[1]-to[1]);
    if (from[0]>0) { //try left
        var left = findPath(board,[from[0]-1,from[1]],to,steps-1,allowed,visited);
        if (left!="X") {
            best = "L"+left;
            if (min==best.length) return best;
        }
    }
    if (from[0]<board[0].length-1) { //try right
        var right = findPath(board,[from[0]+1,from[1]],to,steps-1,allowed,visited);
        if (right!="X" && (right.length<best.length-1||best=="X")) {
            best = "R"+right;
            if (min==best.length) return best;
        }
    }
    if (from[1]>0) { //try up
        var up = findPath(board,[from[0],from[1]-1],to,steps-1,allowed,visited);
        if (up!="X" && (up.length<best.length-1||best=="X")) {
            best = "U"+up;
            if (min==best.length) return best;
        }
    }
    if (from[1]<board.length-1) { //try down
        var down = findPath(board,[from[0],from[1]+1],to,steps-1,allowed,visited);
        if (down!="X" && (down.length<best.length-1||best=="X")) {
            best = "D"+down;
            if (min==best.length) return best;
        }
    }
    return best;
}

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});