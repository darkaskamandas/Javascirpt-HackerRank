var grid=new Array();
function processData(input){
    inp=new Object();
    q=input.split("\n");
    cost_count=0;
    cc=0;
    for(i=0;i<q.length;i++){
        q[i]=q[i].split(" ");
        for(j=0;j<q[i].length;j++){
			q[i][j]=parseInt(q[i][j],10);
            }
    }
    inp.rows=q[0][0];
    inp.cols=q[0][1];
    if(inp.rows%2==1 && inp.cols%2==1){
		console.log(0);
		return;
    }
    //console.log(inp);
    grid=new Array();
    for(i=0;i<inp.rows;i++){
        grid[i]=new Array();
        for(j=0;j<inp.cols;j++)
            grid[i][j]=new Array(0,0,0);
    }
    //console.log(inp);
    //console.log(grid);
    for(i=1;i<=inp.rows;i++){
        for(j=0;j<inp.cols-1;j++){
            grid[i-1][j][0]=q[i][j];
            cost_count+=q[i][j];
            cc++;
        }
    }
    
       
    for(i=inp.rows+1;i<(inp.rows+1)+(inp.rows-1);i++){
        for(j=0;j<inp.cols;j++){
            //console.log(i,j);
            grid[i-(inp.rows+1)][j][1]=q[i][j];
            cost_count+=q[i][j];
            cc++;
        }
    }
    
	output=new Array();
	for(i=0;i<inp.rows;i++){
		output[i]=new Array();
		for(j=0;j<inp.cols;j++){
			output[i][j]=grid[i][j].join(", ");
		}
		output[i]="["+output[i].join("], [")+"]";
	}
	output=output.join("\n");
	//console.log(output);
	
	
	
	now=new Date()/1;
	solution=999999999999999;
	spath=new Array();
    xmax = inp.cols-1;
    ymax = inp.rows-1;
    q=0.0;
    must_fill=true;
    count=0;
	while((new Date()/1 - now)<9.8*1000){
		count++;
		var result=generate_hamiltonian_circuit(q);
		path_length=sumPath(result);
		if(path_length<solution){
			solution=path_length;
			spath=[result[0]+0,result[1].slice(0)];
		}
	}
	console.log(solution);
	//console.log(spath);
	//sumPath(spath, true);
	
}


function sumPath(q, log=false){
	//console.log(q);
	var len=0;
	p=q[1].slice(0,q[0]);
	p.push(q[1][0]);
	cd=0;
	if(log)
		console.log("start:",p[0]);
	for(i=1;i<q[0]+1;i++){
	lt=len+0;
	cd++;
		//temp=[p[i][1],p[i][0]];
		//p[i]=temp;
		if(i==q[0]){
			p[i]=p[0];
		}
		if(p[i][1]-p[i-1][1]==1){
			len+=grid[p[i-1][1]][p[i-1][0]][1];
			if(log)
				console.log("down",grid[p[i-1][1]][p[i-1][0]][1]);
		}
		else if(p[i][1]-p[i-1][1]==-1){
			len+=grid[p[i][1]][p[i][0]][1];
			if(log)
				console.log("up",grid[p[i][1]][p[i][0]][1]);
		}
		else if(p[i][0]-p[i-1][0]==-1){
			len+=grid[p[i][1]][p[i][0]][0];
			if(log)
				console.log("left",grid[p[i][1]][p[i][0]][0]);
		}
		else if(p[i][0]-p[i-1][0]==1){
			len+=grid[p[i][1]][p[i][0]-1][0];
			if(log)
				console.log("right",grid[p[i][1]][p[i][0]-1][0]);
		}
		if(log)
			console.log(p[i], len-lt, len);
	}
	if(log)
		console.log("count",cd);
	//console.log(len);
	return len;
}


var path = [];
var xmax = 20;
var ymax = 20;
var n = (xmax+1)*(ymax+1);
var left_end = true;
var must_fill = true;
var draw_arrow = false;
//Modes for showing trace of ends. (clumsy name, but can't use trace or
//path)
//either:
//0 - do nothing - neither record nor draw
//1 - record and draw (initialise if just turned on)
//2 - draw but no longer record
var showTraceMode = 0;
var nShowTraceModes = 3;
var leftTrace = [];
var nLeftTrace = 0;
var rightTrace = [];
var nRightTrace = 0;

//useful for showing vector field only
var showWalk = true;

function inSublattice(x, y)
{
    if (x<0) return false;
    if (x>xmax) return false;
    if (y<0) return false;
    if (y>ymax) return false;
    return true;
}


function reversePath(i1,i2,path)
{
    var i;
    var jlim = (i2-i1+1)/2;
    var temp;
    for (j=0; j<jlim; j++)
    {
        //slower to use individual values
        //temp = path[i1+j][0];
        //path[i1+j][0] = path[i2-j][0];
        //path[i2-j][0] = temp;
        //temp = path[i1+j][1];
        //path[i1+j][1] = path[i2-j][1];
        //path[i2-j][1] = temp;
        //faster to swap arrays directly
        temp = path[i1+j];
        path[i1+j] = path[i2-j];
        path[i2-j] = temp;
    }
}



function backbite_left(step,n,path)
{
    //choose left hand end
    var neighbour = [path[0][0] + step[0],path[0][1] + step[1]];
    //check to see if neighbour is in sublattice
    if (inSublattice(neighbour[0],neighbour[1]))
    {
        //Now check to see if it's already in path
        var inPath = false;
        //for (j=1; j<n; j++)
        for (j=1; j<n; j+=2)
        {
            //if (neighbour == path[j])
            if ((neighbour[0] == path[j][0]) && (neighbour[1] == path[j][1]))
            {
                inPath = true;
                break;
            }
        }
        if (inPath)
        {
            reversePath(0,j-1,path);
        }
        else
        {
            left_end = !left_end;
            reversePath(0,n-1,path);
            n++;
            path[n-1] = neighbour;
        }
    }
    if (showTraceMode == 1)
    //add new site to the trace for left end
    //not keeping tracking of intermediate site - have the feeling that
    //this will be more clear.
    {
        leftTrace[nLeftTrace] = path[0]
        nLeftTrace++;
    }
    return n;
}

function backbite_right(step,n,path)
{
//choose right hand end
    var neighbour = [path[n-1][0] + step[0],path[n-1][1] + step[1]];
//check to see if neighbour is in sublattice
    if (inSublattice(neighbour[0],neighbour[1]))
    {
        //Now check to see if it's already in path
            var inPath = false;
        //for (j=n-2; j>=0; j--)
        for (j=n-2; j>=0; j-=2)
        {
            //if (neighbour == path[j])
                if ((neighbour[0] == path[j][0]) && (neighbour[1] == path[j][1]))
                {
                    inPath = true;
                    break;
                }
        }
        if (inPath)
        {
            reversePath(j+1,n-1,path);
        }
        else
        {
            n++;
            path[n-1] = neighbour;
        }
    }
    if (showTraceMode == 1)
    //add new edge to the trace for right end
    //not keeping tracking of intermediate site - have the feeling that
    //this will be more clear.
    {
        rightTrace[nRightTrace] = path[n-1]
        nRightTrace++;
    }
    return n;
}

//Slightly more sophisticated, only reversing if new site found
function backbite(n,path)
{
    //var i, j;
    //var x, y;
    //var dx, dy;
    //var xedge, yedge;
    //var iedge, add_edge;
    //choose a random end
    //choose a random neighbour
    //check if its in the sublattice
    //check if its in the path
    //if it is - then reverse loop
    //if it is not - add it to the end
    //the right hand end is always chosen
    //Choose a random step direction
    //console.log(n, path);
    var step;
    switch (Math.floor(Math.random()*4))
    {
        case 0:
            step = [1,0];
            break;
        case 1:
            step = [-1,0];
            break;
        case 2:
            step = [0,1];
            break;
        case 3:
            step = [0,-1];
            break;
    }
    if (Math.floor(Math.random()*2) == 0)
    {
        n = backbite_left(step,n,path);
    }
    else
    {
        n = backbite_right(step,n,path);
    }
    return n;
}

function path_to_string(n,path)
{
    var i;
    var path_string = "[["+path[0]+"]";
    for (i=1; i<n; i++)
    {
        path_string = path_string + ",[" + path[i] + "]";
    }

    path_string += "]";
    return(path_string);
}

//function generate_hamiltonian_path(n,q)
function generate_hamiltonian_path(q)
{
    //initialize path
    //var path = new Array(n*n);
    //var path = new Array(100000);
    //var path = new Array((xmax+1)*(ymax+1));
    //path[0] = [Math.floor(Math.random()*(xmax+1)),
    //Math.floor(Math.random()*(ymax+1))];
    path[0] = [0,0];
    n = 1;
    //nattempts = 1+q*10.0 * (xmax+1) * (ymax+1) * Math.pow(Math.log(2.+(xmax+1)*(ymax+1)),2);
    if (must_fill)
    {
    nattempts = 1 + q*10.0 * (xmax+1) * (ymax+1) * Math.pow(Math.log(2.+(xmax+1)*(ymax+1)),2);
    while (n < (xmax+1)*(ymax+1))
    {
        for (i=0; i<nattempts; i++)
        {
            n = backbite(n,path);
            //console.log(path);
        }
    }
}
else
{
    nattempts = q*10.0 * (xmax+1) * (ymax+1) * Math.pow(Math.log(2.+(xmax+1)*(ymax+1)),2);
        for (i=0; i<nattempts; i++)
        {
            n = backbite(n,path);
        }
}
    return [n,path];
}

function generate_hamiltonian_circuit(q)
{
    //Generates circuits, but because we are subsampling circuits
    //from the set of paths it is in fact not straightforward to
    //sample uniformly at random from the set of circuits. Quite a subtle
    //argument which I won't reproduce here.
    result = generate_hamiltonian_path(q);
    var n = result[0];
    var path = result[1];
    //var path = generate_hamiltonian_path(q);
    var nmax = xmax*ymax;
    var success;
    var min_dist = 1 + (n % 2);
    while (Math.abs(path[n-1][0] - path[0][0])
           + Math.abs(path[n-1][1] - path[0][1]) != min_dist)
    {
        n = backbite(n,path);
    }
    return [n,path];
}

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});