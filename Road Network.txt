'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(str => str.trim());

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the roadNetwork function below.
 */

/*
 * For the weighted graph, <name>:
 *
 * 1. The number of nodes is <name>Nodes.
 * 2. The number of edges is <name>Edges.
 * 3. An edge exists between <name>From[i] to <name>To[i] and the weight of the edge is <name>Weight[i].
 *
 */
function roadNetwork(roadNodes, roadFrom, roadTo, roadWeight) {
    let total = [];
    for (let i = 0; i < roadNodes; i++) {
        let x = 0;
        let cur = roadTo[i];
        for (let j = 0; j < roadNodes; j++) {
            if (roadTo[j] === cur || roadFrom[j] === cur) {
                x += roadWeight[j]
            }
        }
        total.push(x)
    }
    return total.reduce((x, y) => x * y);
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const roadNodesEdges = readLine().split(' ');
    const roadNodes = parseInt(roadNodesEdges[0], 10);
    const roadEdges = parseInt(roadNodesEdges[1], 10);

    let roadFrom = [];
    let roadTo = [];
    let roadWeight = [];

    for (var roadItr = 0; roadItr < roadEdges; roadItr++) {
        const roadFromToWeight = readLine().split(' ');

        roadFrom.push(parseInt(roadFromToWeight[0], 10));
        roadTo.push(parseInt(roadFromToWeight[1], 10));
        roadWeight.push(parseInt(roadFromToWeight[2], 10));
    }

    let result = roadNetwork(roadNodes, roadFrom, roadTo, roadWeight);

    ws.write(result + "\n");

    ws.end();
}